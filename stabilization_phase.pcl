################ Markus Ullsperger, 08-22-01
## simple pictorial feedback

# run1 (block1) is not externally triggered -- adjustment phase during pilot scans
# run2 (block2) is externally triggered -- stabilization phase during functional scans

bool ADJUSTMENT_PHASE = false;

# configuration constants:
int TRG_PER_TRIAL = 9;			# trial length as a number of triggers
double LEFT_MAX = -500.0;		# leftmost possible start position
double WALL_POS = -1.0*LEFT_MAX;	# wall position
double START_WIDTH = -100.0 - LEFT_MAX;	# start range from LEFT_MAX to -100
double MIN_S_DIFF = 50.0;		# minimal start position difference
double MIN_V_DIFF = 0.1;		# minimal speed difference
int N_MAX = 100;			# number of trials
double UP_THRESHOLD = 0.4;		# uppermost error rate (for run 2)
double LOW_THRESHOLD = 0.3;		# lowermost error rate
double NON_INFORMATIVE_RATIO = (UP_THRESHOLD + LOW_THRESHOLD) / 2.0;

int WINDOW = 20;			# number of trials in monitoring window

# variables:
int trg = 1;				# add offset (for start in fmri-emulation)
double t_diff = 300.0;			# time difference at start 300 frames

double td_stabil = 0.0;			# for calculation of t_diff starting point in run 2
int count_stabil = 0;

array<int> resp_buff[21];		# outcome of recent trials: 0 = correct; 1 = error; -1 = late
array<double> td[21];			# t_diff in recent trials
double errors = 0.0;			# count of errors in recent trials
int valid = 0;				# number of valid trials (response in time) in sliding window
double td_avr = t_diff;			# average t_diff in recent trials

int firstball = 1;			# first at wall
int secndball = 2;			# second at wall
array<double> pos[2];			# array for start positions
array<double> v[2];			# ball speeds
array<double> s[2];			# array for way (stretch)
array<double> x[2];			# array for ball positions
array<double> t[2];			# array for time until ball reaches wall

# null events will be inserted before these trials
array<int> SCHEDULE_OF_NULL_EVENTS[14] = { 7, 16, 24, 35, 48, 55, 63, 77, 89, 95, 101, 116, 122, 135 };

int cnt_corr = 0;
int cnt_err = 0;
int nf_corr = 0;
int nf_err = 0;

int score = 0;

sub
  wait_trg(int no_trg)
begin
  trg = trg + no_trg;
  loop
  until
    pulse_manager.main_pulse_count() >= trg
  begin
  end;
  log_event.set_event_code("trigger_no: " + string(trg));	# log trigger number
  log_param.present();
end;

sub
  show_fixation_cross(int fix_duration)
begin
  fix.set_duration(next_picture);
  fix.set_event_code("fix");
  fixation.present();
  wait_trg(TRG_PER_TRIAL);

  fix.set_duration(fix_duration);
  fix.set_event_code("null_event " + string(TRG_PER_TRIAL*1000));
  fixation.present();
end;

sub
  insert_defined_null_events(int n)
begin
  loop
    int nn = 1
  until
    nn > SCHEDULE_OF_NULL_EVENTS.count()
  begin
    if (SCHEDULE_OF_NULL_EVENTS[nn] == n) then
      show_fixation_cross(next_picture);
    end;
    nn = nn + 1;
  end;
end;

sub
  log_trial_parameters
begin
  log_event.set_event_code("td: " + string(t_diff));
  log_param.present();

  string report = "v1st: " + string(v[firstball]) + " v2nd: " + string(v[secndball]);
  log_event.set_event_code(report);
  log_param.present();

  report = "p1st: " + string(pos[firstball]) + " p2nd: " + string(pos[secndball]);
  log_event.set_event_code(report);
  log_param.present();

  report = "td_avr: " + string(td_avr) + " err: " + string(errors);
  log_event.set_event_code(report);
  log_param.present();
end;

sub
  compute_running_averages(int n)
begin
  errors = 0.0;
  valid = 0;

  if (n > WINDOW) then
    loop
      int tn = 1
    until
      tn > WINDOW
    begin
      resp_buff[tn] = resp_buff[tn + 1];
      if (resp_buff[tn] >= 0) then
	errors = errors + double(resp_buff[tn]);
	valid = valid + 1;
      end;
      tn = tn + 1;
    end;
  else
    resp_buff[n] = resp_buff[WINDOW+1];
    loop
      int tn = 1
    until
      tn > n
    begin
      if (resp_buff[tn] >= 0) then
	errors = errors + double(resp_buff[tn]);
	valid = valid + 1;
      end;
      tn = tn + 1;
    end;
  end;

  if (valid >= 1) then
    errors = errors / double(valid);
  else
    errors = LOW_THRESHOLD;
  end;
end;

sub
  compute_new_speed_and_position
begin
  firstball = random(1,2);
  secndball = 3 - firstball;

  loop
    bool ctrl = false
  until
    ctrl
  begin
    v[firstball] = 1.6 - random()*0.8;			# pick random speed v[1st] between 0.8 and 1.6 pixel/frame
    pos[1] = LEFT_MAX + random() * START_WIDTH;		# pick random position 1 between LEFT_MAX and LEFT_MAX + START_WIDTH

    if (pos[1] > (LEFT_MAX + START_WIDTH/2.0)) then
      pos[2] = pos[1] - (MIN_S_DIFF + (START_WIDTH/2.0 - MIN_S_DIFF)*random());	# pick random position 2 at least MIN_S_DIFF and max max_width pixels before pos1
    else
      pos[2] = pos[1] + (MIN_S_DIFF + (START_WIDTH/2.0 - MIN_S_DIFF)*random());	# pick random position 2 at least MIN_S_DIFF and max max_width pixels after pos1
    end;

    s[1] = WALL_POS - pos[1];				# stretch to wall pos1
    s[2] = WALL_POS - pos[2];				# stretch to wall pos2

    t[firstball] = s[firstball] / v[firstball];		# time until first ball reaches wall
    t[secndball] = t[firstball] + t_diff;		# time until second ball reaches wall
    v[secndball] = s[secndball] / t[secndball];		# speed 2nd

    ctrl = (abs(v[1] - v[2]) <= MIN_V_DIFF);
  end;
end;

sub
  compute_new_t_diff(int n)
begin
  if ADJUSTMENT_PHASE then
    if resp_buff[WINDOW + 1] == 0 then		# adjustment run - react on every response
      t_diff = t_diff - t_diff * 0.1;		# make it more difficult (time difference smaller)
    elseif resp_buff[WINDOW + 1] == 1 then
      t_diff = t_diff + t_diff * 0.1;		# make it easier (time difference larger)
    end;
  else
    if (errors < LOW_THRESHOLD) then		# stabilization run - react on changes of mean performance in monitoring buffer
      t_diff = td_avr - td_avr*0.1;		# make it more difficult (time difference smaller)
    elseif (errors > UP_THRESHOLD) then
      t_diff = td_avr + td_avr*0.1;		# make it easier (time difference larger)
    end;
  end;

  td[WINDOW + 1] = t_diff;			# push new t_diff in monitoring buffer
  td_avr = 0.0;					# t_diff average

  if (n > WINDOW) then
    loop
      int tn = 1
    until
      tn > WINDOW				# count last 10 trials (averaging window)
    begin
      td[tn] = td[tn + 1];			# shift t_diff monitoring window
      td_avr = td_avr + td[tn];			# sum up t_diff of last trials in averaging window
      tn = tn + 1;
    end;
    td_avr = td_avr / double(WINDOW);		# mean t_diff in monitoring window
  else
    td[n] = td[WINDOW + 1];
    loop
      int tn = 1
    until
      tn > n
    begin
      td_avr = td_avr + td[tn];			# sum up t_diff of last trials (first trials of run)
      tn = tn + 1;
    end;
    td_avr = td_avr / double(n);		# mean t_diff over first n trials
  end;
end;

sub
  show_ball_movement
begin
  warn.set_part_x(1, int(WALL_POS));
  warning.present();
  loop
    double i = 0.0
  until
    i >= 100.0
  begin
    x[1] = pos[1] + i*v[1];			# move ball 1
    x[2] = pos[2] + i*v[2];			# move ball 2
    ball.set_part_x(1, int(x[1]));
    ball.set_part_x(2, int(x[2]));
    ball.set_part_x(3, int(WALL_POS));		# present wall
    if (i == 1.0) then
      one_step.set_event_code("ball1" + string(NON_INFORMATIVE_RATIO));
    else
      one_step.set_event_code("");
    end;
    ball_mv.present();
    i = i + 1.0;
  end;
end;

sub
  show_correct_feedback
begin
  cnt_corr = cnt_corr + 1;
  symbol.set_part(1, correct);
  score_text.set_caption("+50");
  feed_event.set_event_code("correct");
  if !ADJUSTMENT_PHASE && random(1,2) == 1 then
    nf_corr = nf_corr + 1;
    symbol.set_part(1, nf);
    # 35% percent chance of showing that they were correct
    if random() < NON_INFORMATIVE_RATIO then
      response_info.set_event_code("correct|non-informative|+50");
      score = score + 50;
      score_text.set_caption("+50");
    else
      response_info.set_event_code("correct|non-informative|-50");
      score = score - 50;
      score_text.set_caption("-50");
    end;
    feed_event.set_event_code("correct_nf");
  else
    response_info.set_event_code("correct|informative|+50");
    score = score + 50;
  end;
  score_text.redraw();
  feedbk.present();
  resp_buff[WINDOW + 1] = 0;
end;

sub
  show_incorrect_feedback
begin
  cnt_err = cnt_err + 1;
  symbol.set_part(1, error);
  score_text.set_caption("-50");
  feed_event.set_event_code("error");
  if !ADJUSTMENT_PHASE && random(1,2) == 1 then
    nf_err = nf_err + 1;
    symbol.set_part(1, nf);
    # 35% percent chance of showing that they were correct
    if random() < NON_INFORMATIVE_RATIO then
      response_info.set_event_code("incorrect|non-informative|+50");
      score = score + 50;
      score_text.set_caption("+50");
    else
      response_info.set_event_code("incorrect|non-informative|-50");
      score = score - 50;
      score_text.set_caption("-50");
    end;
    feed_event.set_event_code("error_nf");
  else
    response_info.set_event_code("incorrect|informative|-50");
    score = score - 50;
  end;
  score_text.redraw();
  feedbk.present();
  resp_buff[WINDOW + 1] = 1;
end;

sub
  show_late_feedback
begin
  response_info.set_event_code("missed|missed");
  symbol.set_part(1, miss);
  score_text.set_caption("0");
  score_text.redraw();
  feed_event.set_event_code("late");
  feedbk.present();
  resp_buff[WINDOW + 1] = -1;
end;

sub
  show_feedback
begin
  if (response_manager.hits() > 0) then
    show_correct_feedback();
  elseif (response_manager.incorrects() > 0) then
    show_incorrect_feedback();
  else	# no response ...
    show_late_feedback();
  end;
end;

sub
  double read_parameter
begin
  input_file input = new input_file;
  input.open("parameter.txt");
  loop
  until
    input.end_of_file()
  begin
    td_stabil = input.get_double()
  end;

  if (!input.last_succeeded()) then
    exit("Scenario failed");
  else
    input.close();
  end;
  return td_stabil;
end;

sub
  save_parameter( double stabil)
begin
  output_file output = new output_file;
  output.open("..\\parameter.txt" );
  output.print(stabil);
  output.close();
end;

if !ADJUSTMENT_PHASE then
  td_stabil = read_parameter();
  t_diff = td_stabil;
end;

##### start movement judgment ######
td[1] = t_diff;			# set 1st value of td buffer
resp_buff[1] = 0;		# set 1st value of response buffer
errors = 0.0;			# set 1st value of error average
td_avr = t_diff;

#### intro of run
intro2.present();		# Present wait-for-trigger text.

### initial fixation before each run
wait_trg(0);			# wait for 1st trigger

fix.set_duration(next_picture);
fix.set_event_code("initial_fix: 10000");
fixation.present();
wait_trg(1);			# wait for 1s (first trial will wait another 9s before starting)

###### start run #####
loop
  int n = 1
until
  n > N_MAX
begin
  insert_defined_null_events(n);
  double fix_dur;
  if ADJUSTMENT_PHASE then
    show_fixation_cross(next_picture);
  else
    fix_dur = 3500.0 + (50.0* double(int(random()*10.0 + 0.5)));  	# fixation varies from 3500 to 4000 ms
    show_fixation_cross(int(fix_dur));
  end;
  compute_new_speed_and_position();
  log_trial_parameters();

  show_ball_movement();
  resp.set_target_button(firstball);			# set target button
  ask.present();					# ask for response

  show_feedback();

  n = n + 1;
  compute_running_averages(n);
  compute_new_t_diff(n);

  if ADJUSTMENT_PHASE then
    if (n > WINDOW) && (errors >= LOW_THRESHOLD) && (errors <= UP_THRESHOLD) then
      td_stabil = td_stabil + td_avr;			# run 1 -- adjust difficulty for start of run 2
      count_stabil = count_stabil + 1;
    end;
  end;
end;

log_trial_parameters();

if ADJUSTMENT_PHASE then
  # estimate starting difficulty for next blocks
  if (count_stabil == 0) then
    td_stabil = t_diff;
  else
    td_stabil = td_stabil / double(count_stabil);
  end;

  show_fixation_cross(next_picture);
  wait_trg(10);

  log_event.set_event_code("td_adjust: " + string(td_stabil));
  log_param.present();
  save_parameter(td_stabil);
else
  fix.set_duration(next_picture);
  fix.set_event_code("fix");
  fixation.present();
  wait_trg(TRG_PER_TRIAL);

  fix.set_duration(next_picture);
  fix.set_event_code("final_fix: 10000");
  fixation.present();
  wait_trg(10);

  log_event.set_event_code("n_correct: " + string(cnt_corr) + " n_error: " + string(cnt_err));
  log_param.present();
  log_event.set_event_code("nf_correct: " + string(nf_corr) + " nf_error: " + string(nf_err));
  log_param.present();
end;

ende.present();
